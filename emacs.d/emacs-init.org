#+Title: Emacs configuration
#+Author: sondr3

* My Emacs settings
  This is my emacs settings that are continously evolving... and I'm a newbie so
  I don't really know what I'm doing either.

** NOTE
   This file is automagically tangled into a =emacs-init.el= file so no editing that file.

* Package management
  I have no idea how that works, but apparently [[https://github.com/rdallasgray/pallet][Pallet]] and [[https://github.com/cask/cask][Cask]] is the new
  hotness in Emacsland. I will also be using the excellent [[https://github.com/jwiegley/use-package][use-package]] along
  with [[https://github.com/edvorg/req-package][req-package]] for some real package management goodness. Good golly.

* Core settings
  Some settings to give Emacs a bunch of sane defaults.

** =Req-package= (=use-package=) and custom settings
   Before we start using packages and such we need to setup =req-packages= and
   =use-package= as well

#+BEGIN_SRC emacs-lisp
  (require 'req-package)
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

** Make sure the path loads properly on OS X
   This depends on the [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package so it will properly load the
   path.

#+BEGIN_SRC emacs-lisp
  (req-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC

** Encoding
   UTF-8 ALL THE THINGS!

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+END_SRC

** Some general settings
   Common sense settings really, most of these are pretty basic and shouldn't
   contain any magic. Most things are also comments just in case. 

*** Settings some defaults
#+BEGIN_SRC emacs-lisp
  (setq
   x-select-enable-clipboard t           ;; allow pasting outside Emacs
   global-auto-revert-non-file-buffers t ;; auto refresh dired quietly
   auto-revert-verbose nil
   echo-keystrokes 0.1                   ;; show keystrokes in progress
   delete-by-moving-to-trash t           ;; does what it says
   jump-char-lazy-highlight-face nil     ;; don't highlight matches with jump-char
   line-number-mode t                    ;; display line numbers
   column-number-mode t                  ;; and columns
   fill-column 80                        ;; lines should be 80 chars wide
   gc-cons-threshold 20000000            ;; we have tons of memory now, don't be greedy
   enable-recursive-minibuffers t        ;; let minibuffers be recursive
   visible-bell t                        ;; hide that ding ding
   font-lock-maximum-decoration t        ;; decorate all buffers with colors
   color-theme-is-global t               ;; does what it says
   truncate-partial-width-windows nil    ;; truncate buffers
   tab-always-indent 'complete           ;; tab before indenting
   require-final-newline t               ;; always add a newline when saving
   show-paren-delay 0                    ;; because saving miliseconds is woreth it
   load-prefer-newer t                   ;; prefer newer .el files to .elc
   )

  (setq-default
   tab-width 4
   indent-tabs-mode nil                  ;; indent with spaces and not tabs
   fill-column 80                        ;; max 80 characters wide
   auto-fill-function 'do-auto-fill      ;; automatically wrap long lines
   )
#+END_SRC

*** Global modes
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)    ;; show matching paranthesises
  (blink-cursor-mode -1) ;; don't blink the cursor
#+END_SRC

*** IDO Mode
#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (ido-mode t)
#+END_SRC

*** Assorted commands
    Mostly commands that annoy the hell out of me, like trying to undo and being
    asked repeadedly if you wanted to downcase it instead. Blerh.
#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'erase-buffer 'disable 'nil)
#+END_SRC

* Appearance
  Now comes the time to make sure Emacs starts looking dashin'.

** Bars, bars
   There's no need for the menubar/toolbar/scrollbar or splash screen so these are all hidden.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
#+END_SRC

** Fonts
   I've currently settled for using Monaco for Emacs and terminals
   alike, it's a great font that's very easily readable and also works well with
   code and numbers.

#+BEGIN_SRC emacs-lisp
  (set-default-font "Monaco")
  (set-face-attribute 'default nil
                      :family "Monaco"
                      :height 120
                      :weight 'normal
                      :width 'normal)
#+END_SRC

** Theme
   Probably the most second most important thing in an editor for me, after of
   course a text editor. And an operating system. VIM would be nice to have
   too. [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] is a good start, although [[ethanschoonover.com/solarized][Solarized]] isn't bad at all, just hard
   to find a properly working version of it.

#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC

** Powerline aka smart-mode-line
   After getting used to the pretty powerline in VIM looking at the normal
   powerline in Emacs just isn't very nice, although it does show plenty of
   information. However, none of the direct VIM forks of Powerline (or
   vim-airline in my case), so I ended up using [[https://github.com/Bruce-Connor/smart-mode-line/][smart-mode-line]] instead.

#+BEGIN_SRC emacs-lisp
  (req-package smart-mode-line)

  (req-package smart-mode-line-powerline-theme
    :require smart-mode-line
    :init
    (sml/setup)
    (setq sml/theme 'powerline))
#+END_SRC

* EVIL aka VIM in Emacs
  Now for the greater things in life; VIM. As much as I love Emacs I still think
  modal editing is a much better way to edit text, and as such I'm using EVIL
  mode in Emacs to get all the goodies from VIM into Emacs. It's a combination
  that simply can't be beat.

** =evil=

#+BEGIN_SRC emacs-lisp
  (req-package evil
    :require (evil-surround undo-tree ace-jump-mode)
    :ensure evil
    :init
    (progn
      (evil-mode 1)
      (setq evil-default-cursor t)
      (setq evil-motion-state-modes
            (append evil-emacs-state-modes evil-motion-state-modes))))
#+END_SRC

** =evil-leader=
   The leader is a really useful thing in Vim and pretty much required for me,
   and luckily with =evil-leader= you can have it in Emacs as well! Here it's
   set to =<SPACE>=.

#+BEGIN_SRC emacs-lisp
  (req-package evil-leader
    :require evil
    :ensure evil-leader
    :init
    (progn
      (evil-leader/set-leader "<SPC>")
      (global-evil-leader-mode 1)))
#+END_SRC
   
** =evil-surround=
   I love =wim-surround=, it's incredibly handy being able to switch what
   characters surround what, remove them, add new ones and so on and Tim Pope's
   plugin is great for it, luckily, it's for Emacs too.

#+BEGIN_SRC emacs-lisp
  (req-package evil-surround
    :init
    (global-evil-surround-mode 1))
#+END_SRC

** =undo-tree=
   Because the regular way that Emacs does undos is not very intuitive.

#+BEGIN_SRC emacs-lisp
  (req-package undo-tree
    :diminish ""
    :init
    (progn
      (setq undo-tree-auto-save-history t)
      (global-undo-tree-mode)))
#+END_SRC

** =ace-jump-mode=
   Getting around quickly is quite useful.

#+BEGIN_SRC emacs-lisp
(req-package ace-jump-mode)
#+END_SRC

** Keybinds
   The only one I really need is being able to use =jj= instead of =ESC=, but to
   do this I need [[http://www.emacswiki.org/emacs/key-chord.el][key-chord.el]].

#+BEGIN_SRC emacs-lisp
  (req-package key-chord
    :init
    (key-chord-mode 1)
    :config
    (progn
      (setq key-chord-two-keys-delay 0.5)
      (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)))
#+END_SRC

* And finish
  Now we only need to finish installing everything and we can be on our merry
  way!

#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
