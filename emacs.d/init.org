#+TITLE: Configuring Emacs
#+AUTHOR: Sondre Nilsen
#+EMAIL: nilsen.sondre@gmail.com

* Preface

I've always been a fan of ~org-babel~, even from before I used Emacs. Now I can finally document the whys and hows without tons of comments everywhere.

** Settings

I run the latest and greatest of Emacs (whatever that is) and that works for me.

* General settings

For settings that don't really belong in any specific category.

*** Name
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Sondre Nilsen"
        user-mail-addres "nilsen.sondre@gmail.com")
#+END_SRC

*** Packages
Load Marmalade and Melpa for more packaging goodness.
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/")
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
#+END_SRC

And since I am going to be using ~use-package~ for installing and
configuring packages as well, I need to make sure that is installed as
well.
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

Furthermore, I want to automatically compile my emacs files.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-compile
    :ensure t
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Interface
** Font
Good fonts are important and I normally change quite often between
some, but have now settled for Source Code Pro. It has all the bells
and whistles that I want and looks really good.
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-frame-font "Source Code Pro")
  (set-face-attribute 'default nil
                      :height 120)
#+END_SRC
** Real estate
I don't need any of these as they just end up taking up my precious screen real estate.
#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode 1)
    (scroll-bar-mode -1))
#+END_SRC

* Evil
** Installing
I won't claim that I'm a huge VIM power user, because I'm not, but
after having used it for a while (and only scratching the surface), I
absolutely cannot live without it. So by extension I need Evil in
Emacs for some lovely VIM on Emacs action.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil
    :ensure t
    :init
    (evil-mode 1))
#+END_SRC
** Set the ~<leader>~ key
I switched the leader key in VIM to ~<SPC>~ almost immediately after
starting to use it, so I don't even know what it is set to by
default. So I need it to be space here too.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-leader
    :ensure t
    :init (global-evil-leader-mode)
    :config
    (progn
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key
        "w" 'save-buffer)))
#+END_SRC

* Functions
** Automatically tangle and byte compile init.org
I tried having a local variable at the end of this file that would automatically
tangle this file into a ~init.el~ file on save, but that didn't work so I had to
create this function instead. It also byte compiles the ~init.el~ file on save as 
well. Taken from [[https://github.com/larstvei/dot-emacs]].

Due to how I organize my dotfiles, Emacs will ask to follow the
symlink to where I link it from, this is not wanted behaviour as it
makes the function not work since you're no longer editing a file in
your emacs home directory.  
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/tangle-init()
    "If the current file is 'init.org', the code blocks are tangled and compiled"
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'my/tangle-init)
#+END_SRC
