#+TITLE: Configuring Emacs
#+AUTHOR: Sondre Nilsen
#+EMAIL: nilsen.sondre@gmail.com

* Preface

I've always been a fan of ~org-babel~, even from before I used
Emacs. Now I can finally document the whys and hows without tons of
comments everywhere.

** Setup 

I run the latest and greatest of Emacs (whatever that is) under OS X.

* General preferences 
For settings that don't really belong in any specific category. Like
default behaviour and such.

*** Name
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Sondre Nilsen"
        user-mail-addres "nilsen.sondre@gmail.com")
#+END_SRC

*** Packages
Load Marmalade and Melpa for more packaging goodness.
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("org" . "http://orgmode.org/elpa/")
          ("melpa" . "http://melpa.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))
  (package-initialize)
#+END_SRC

And since I am going to be using ~use-package~ for installing and
configuring packages as well, I need to make sure that is installed as
well.
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

Furthermore, I want to automatically compile my emacs files.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-compile
    :ensure t
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

*** Yes and/or no
It's annoying having to write ~yes~ or ~no~ instead of just ~y~ or
~n~. So we change that as well.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Disable the bell
Because god fucking dammit, that shit gets annoying really quick.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+END_SRC
* Interface
Settings that change how the interface looks and behaves.
** Font
Good fonts are important and I normally change quite often between
some, but have now settled for Source Code Pro. It has all the bells
and whistles that I want and looks really good.
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-frame-font "Source Code Pro")
  (set-face-attribute 'default nil
                      :height 120)
#+END_SRC
** Real estate
I don't need any of these as they just end up taking up my precious screen real estate.
#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode 1)
    (scroll-bar-mode -1))
#+END_SRC

** Relative line numbers
This is probably one of my favorite features from VIM, makes it
incredibly easy to both see where you are on the screen and move
around within the buffer. However, we'll only enable relative line
numbers in programming modes as it freaks out in for example Org mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol ""
          linum-relative-format " %3s "))

  (add-hook 'prog-mode-hook #'linum-relative-mode)
#+END_SRC
** TODO Line numbers in text modes
** Cursor
I have a hard time with using a box for the cursor compared to a bar,
since I never seem to figure out which side of the character the
cursor is on. So we change the cursor to be a bar instead.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default cursor-type 'bar)
#+END_SRC
** Window title
I'd like to be able to see which file I'm editing from the frame, not
just ~Emacs@hostname~. 
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq frame-title-format '(:eval (concat (buffer-name) " :: GNU Emacs")))
#+END_SRC
** Mode line
*** Hide line and column numbers
#+BEGIN_SRC emacs-lisp :tangle yes
  (line-number-mode 0)
  (column-number-mode 0)
#+END_SRC
* Evil
** Installing
I won't claim that I'm a huge VIM power user, because I'm not, but
after having used it for a while (and only scratching the surface), I
absolutely cannot live without it. So by extension I need Evil in
Emacs for some lovely VIM on Emacs action.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC
** Leader and chords 
I switched the leader key in VIM to ~<SPC>~ almost immediately after
starting to use it, so I don't even know what it is set to by
default. So I need it to be space here too.

I also have a few chords set up that I use for various commands:
| Chord     | Description            | Function           |
|-----------+------------------------+--------------------|
| ~<SPC> w~ | Save current buffer    | ~save-buffer~      |
| ~<SPC> o~ | Open file              | ~find-file~        |
| ~<SPC> b~ | Switch between buffers | ~switch-to-buffer~ |
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package general
    :ensure t
    :config
    (setq general-default-keymaps 'evil-normal-state-map)
    (setq general-default-prefix "<SPC>")
    (general-define-key "w" 'save-buffer
                        "o" 'find-file
                        "b" 'switch-to-buffer))
#+END_SRC
** Using ~jk~ to exit insert mode
~ESC~ is just too far to reach for mere mortals, and I even play
piano. So I changed the way you exit Insert Mode in VIM to be ~jk~ to
help my pinky. For this we have to use a package called ~KeyChord~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package key-chord
    :ensure t
    :config
    (setq key-chord-two-keys-delays 0.5)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (key-chord-mode 1))
#+END_SRC
** Make ~ESC~ quit everything
In VIM once your press ~ESC~ you stop everything, in Emacs you end up
having to button mash it quite a few times to exit all the way
out. Thankfully, ~davvil~ on Github has it solved [[https://github.com/davvil/.emacs.d/blob/master/init.el][here]].
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC
** Keybinds
*** Change ~:~ to ~;~
I read about this on reddit while I still used VIM and I really
enjoyed it. It also helps that I'm lazy and don't want to press ~S-:~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key evil-normal-state-map (kbd ";") 'evil-ex)
#+END_SRC
*** Moving between buffers
I use Tmux in my terminal and bound the key to switch between windows
in it to be ~C-[hjkl]~, and did the same in VIM to be able to move
between windows in both Tmux and VIM. So to have the same in Emacs
would be nice, even though I could use ~C-w [hjkl]~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+END_SRC
* Keybinds
*** Extra leader keybinds
Because I want only the most important keybinds to be bound via
~<SPC>~, I have set up ~,~ as a secondary leader key with commands
that I use quite often but aren't as "important" as the ones bound to
the main leader.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package general
    :config
    (setq secondary-leader ",")
    (general-define-key :prefix secondary-leader
                        "e" 'eval-buffer))
#+END_SRC
* Programming
** General preferences
*** Electric pair mode
~electric-pair-mode~ automatically inserts the correct closing bracket
or parentheses, but I only want this in programming modes.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC
*** Parentheses
I mostly dabble in Scheme or LISP, and so parentheses are pretty
important to me. We already have them auto-close, now we want them to
automatically show the matching parenthesis, brackets and so on, and
do it without delay.
#+BEGIN_SRC emacs-lisp :tangle yes
  (show-paren-mode)
  (setq show-paren-delay 0)
#+END_SRC

Then, to make the parentheses even more pretty, we are going to use
~rainbow-delimeters~ to make em purdy.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Org mode
** Get Org mode from Git
This is mostly because I like being able to have the latest and
greatest of things, however with ~use-package~ and packages that come
with Emacs you need to do something extra for it to fetch the latest
version. For more info see [[https://github.com/jwiegley/use-package/issues/319][here]]. We have already added the Org mode
ELPA repo.

Then we need to make sure we install the latest version of Org. To do
this we actually need to ensure ~org-plus-contrib~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib)
#+END_SRC
** Syntax highlighting
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default org-src-fontify-natively t)
#+END_SRC
* Functions
** Automatically tangle and byte compile init.org
I tried having a local variable at the end of this file that would automatically
tangle this file into a ~init.el~ file on save, but that didn't work so I had to
steal this function instead. It also byte compiles the ~init.el~ file on save as 
well. Taken from [[https://github.com/larstvei/dot-emacs]].

Due to how I organize my dotfiles, Emacs will ask to follow the
symlink to where I link it from, this is not wanted behaviour as it
makes the function not work since you're no longer editing a file in
your emacs home directory.  
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/tangle-init()
    "If the current file is 'init.org', the code blocks are tangled and compiled"
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook #'my/tangle-init)
#+END_SRC
