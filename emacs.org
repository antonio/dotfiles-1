
#+TITLE: Emacs settings
#+AUTHOR: Sondre Nilsen
#+EMAIL: nilsen.sondre@gmail.com
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Introduction
After many a times when I've tried to use Emacs and Vim and whatnot I always end
up trying to configure it to do way too much initially. Instead of just starting
out with a bare minimum of configuration I just pile on stuff from the beginning
instead of just using them and then changing what bothers me. This is an attempt
to start out bare and then just change whatever bothers me.

* Initial settings
Before we get going we're going to set up packaging for Emacs.

** User
First and foremost, I'm going to set my own name and email so we can use that.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Sondre Nilsen"
	user-mail-address "nilsen.sondre@gmail.com")
#+END_SRC

** Packaging
I'm going to be using ~use-package~ to load all my packages, I've used it before
with great success and it's going to be in Emacs core sooner or later so why not
get a headstart. First of all though we do need to do some initial configuring
for it to get properly set up.

*** Initialize package
Obviously we do need to start out with enabling packages... goes without saying.
#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

*** Repositories
I'm also going to add a few package repositories to get packages from.
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

*** Settings
I also always want the newest version of files to be loaded.
#+BEGIN_SRC emacs-lisp
  (setq-default load-prefer-newer t)
#+END_SRC

And since I am using ~use-package~ there is no need to enable the packages on
startup as it will be defered by it.
#+BEGIN_SRC emacs-lisp
  (setq-default package-enable-at-startup nil)
#+END_SRC

*** Actually initialize
And now we can finally initialize the packages.
#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

*** Install ~use-package~
I did mention that I was going to use ~use-package~ for managing and installing
packages. So we'll always make sure that it's installed and available.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

And then finally we load ~use-package~.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
#+END_SRC
*** ~use-package~ settings
Then we need to set some settings for ~use-package~.

Since all the packages configured via ~use-package~ are actually used I'm going to
set it so that all packages are always ensured, so that you can forgo doing
~:ensure t~ on every package.
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

And then we make sure that all the packages are actually installed before
initializing them.
#+BEGIN_SRC emacs-lisp
  (setq use-package-check-before-init t)
#+END_SRC

Finally we're going to always defer loading packages, just to save some time to
load Emacs. If we require a package before it's loaded we can demand it by using
~:demand t~ while configuring it.
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t)
#+END_SRC
* Defaults
There are a lot of quirks and settings that doesn't make sense to me, but since
it's Emacs we can change everything. And we are more than likely going to do so
too, hah.

** Built-in modes
*** /(Auto) Fill Mode/
Even though I could use ~M-q~ to fill out my paragraphs I like when it happens
automatically, luckily we have ~auto-fill-mode~ for this. I also like my text to
be a maximum of 80 characters wide.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC
* Appearance
I'm a sucker for minimalistic and clean interfaces, and Emacs out of the box
does not really look nice. It definitely looks like something out of the
eighties, which is fine... as long as you can change it as you want to.

** Font
There are a ton of different fonts that I've tried and seen. I've previously
used ~Monaco~ and ~Source Code Pro~ but for the last few months I've been using
~Input Mono~ which I really like.

This is however definitely subject to change.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Input Mono" :height 120)
  (set-face-attribute 'variable-pitch nil
                      :family "Input Mono" :height 130 :weight 'regular)
#+END_SRC

** Theme
The second most important part of making things look good is the theme, and I
far prefer light themes over dark themes. Unless it's late at night, then having
a dark theme is fine. So using a theme that has both and that I like is what I
was after. I found that in ~tao~.

TODO Create function to change theme with shortcut
#+BEGIN_SRC emacs-lisp
  (use-package tao-theme
    :demand t
    :init (load-theme 'tao-yang t))
#+END_SRC

** Fringe
I am also not a fan of how close to the edge of the windows everything is in
Emacs, so I like to make sure the fringe is a bit wider than normal.
#+BEGIN_SRC emacs-lisp
  (fringe-mode '(16 . 16))
#+END_SRC

** Line spacing
This is different from most other Emacs configurations I've seen, but I like to
give my lines some more space to make them breathe, otherwise they feel too
squished together.
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0.15)
#+END_SRC

** Hide various bars
I don't really use any of these and they look really out of place, especially
the menu bar. So I just hide them.
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC

** Start maximized
Whenever I start up Emacs I just want it to immediately go into fullscreen.
#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
#+END_SRC

** Cursor
The default icon for the cursor in Emacs is a bar, and I have always been really
bad at understanding exactly what is under or next to it when it's a bar, so
I'll just change it to a bar instead.
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 2))
#+END_SRC

** Highlight current line
When the cursor is a small bar however it can be pretty hard to tell where it
is, so to make it easier to spot I will simply highlight the whole line that the
cursor is on.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
* Org-mode
As this whole configuration is built on ~org-mode~ we're going to install the
latest and greatest version of it as well to get even more goodies.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib)
#+END_SRC

** Conveniences
There are a few things I need to configure with ~org-mode~ though, just to make it
a bit more convenient to work with.

*** Syntax highlighting
First of all, having all the ~BEGIN_SRC~ blocks display their syntax highlighting
always.
#+BEGIN_SRC emacs-lisp
  (setq-default org-src-fontify-natively t)
#+END_SRC

*** Indent headers
Although ~org-mode~ looks nice out of the box, I find it a bit difficult to see
which header is on which level, so I'm going to indent them instead, and use
~Delight~ to hide the ~org-indent-mode~ from the powerline.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

*** Emphasis markers
And then finally I'm going to hide the emphasis markers. This makes it so source
blocks that are inline, italicized words and so on have their markers hidden. No
more ~_hello world_~ and so on.
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC
** Functions
Assorted functions related to ~org-mode~.

*** Tangle ~emacs.org~
I keep forgetting to tangle this file whenever I do changes to it and I get
really confused when the changes aren't there when I restart Emacs again. This
function automatically tangles this file on save and bytecompiles the ~.emacs.d~
directory at the same time. /Efficiency!/
#+BEGIN_SRC emacs-lisp
  (defun my-tangle-bytecompile-org ()
    "Tangles emacs.org and bytecompiles .emacs.d"
    (when (equal (buffer-name)
                 (concat "emacs.org"))
      (org-babel-tangle)
      (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))

  (add-hook 'after-save-hook #'my-tangle-bytecompile-org)
#+END_SRC
* Programming
This is where assorted settings that's related to programming go, either that's
syntax highlighting or syntax checking and so on.

** Indentation
I've long been a fan of automatic indentation of code, and there's a package
called ~aggressive-indent~ that I really enjoy using for Lisps. /NOTE/: This doesn't
work with all languages, so I'll only enable them for Lisps at the moment.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config
    (progn
      (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)))
#+END_SRC

** Delimiters
Parantheses, brackets, angles and so on and so forth.

*** ~Electric Pair Mode~
This is a built-in mode for automatically pairing various delimiters, so in
programming modes for example it will automatically create a closing delimiter.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC

*** Show matching parantheses
This is a global minor mode that highlights matching parantheses according to
your theme. Especially nice for Lisps (obviously). I also don't want a delay for
showing the matching paranthesis, so it'll display immediately.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :init (show-paren-mode 1)
    :config (setq show-paren-delay 0))
#+END_SRC

*** Rainbows
Oh yes indeed, nothing better than some colors to lighten up our world. This is
also surprisingly helpful when trying to at a glance figure out which
paranthesis belongs with each other.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Lisp(s)
** ~Lispy~
Although there is the long established ~Paredit~ that people use to move through
and manipulate Lisps, I actually want to do a deepdive into ~Lispy~ instead. It
looks fun, ~abo-abo~ is amazing and why not?
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :config
    (progn
      (add-hook 'emacs-lisp-mode-hook #'lispy-mode)))
#+END_SRC
