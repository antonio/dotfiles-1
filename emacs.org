#+TITLE: Emacs settings
#+AUTHOR: Sondre Nilsen
#+EMAIL: nilsen.sondre@gmail.com
#+PROPERTY: header-args :tangle ~./emacs.d/init.el

* Introduction
After many a times when I've tried to use Emacs and Vim and whatnot I
always end up trying to configure it to do way too much
initially. Instead of just starting out with a bare minimum of
configuration I just pile on stuff from the beginning instead of just
using them and then changing what bothers me. This is an attempt to
start out bare and then just change whatever bothers me.

* Initial settings
Before we get going we're going to set up packaging for Emacs.

** User
First and foremost, I'm going to set my own name and email so we can
use that.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Sondre Nilsen"
	user-mail-address "nilsen.sondre@gmail.com")
#+END_SRC

** Packaging
I'm going to be using ~use-package~ to load all my packages, I've used
it before with great success and it's going to be in Emacs core sooner
or later so why not get a headstart. First of all though we do need to
do some initial configuring for it to get properly set up.

*** Initialize package
Obviously we do need to start out with enabling packages... goes
without saying.
#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

*** Repositories
I'm also going to add a few package repositories to get packages from.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

*** Settings
I also always want the newest version of files to be loaded.
#+BEGIN_SRC emacs-lisp
  (setq-default load-prefer-newer t)
#+END_SRC

And since I am using ~use-package~ there is no need to enable the
packages on startup as it will be defered by it.
#+BEGIN_SRC emacs-lisp
  (setq-default package-enable-at-startup nil)
#+END_SRC

*** Actually initialize
And now we can finally initialize the packages.
#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

*** Install ~use-package~ and ~delight~
I did mention that I was going to use ~use-package~ but I am also
going to install ~delight~ from the get-go since I will be using it to
hide and change the names of major and minor modes.
#+BEGIN_SRC emacs-lisp
  (unless (and (package-installed-p 'use-package)
	       (package-installed-p 'delight))
    (package-refresh-contents)
    (package-install 'use-package t)
    (package-install 'delight t))
#+END_SRC

*** ~use-package~ settings
And then at the end we can set some settings for ~use-package~.

Since all the packages configured via ~use-package~ are actually used
I'm going to set it so that all packages are always ensured, so that
you can forgo doing ~:ensure t~ on every package.
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

And then we make sure that all the packages are actually installed
before initializing them.
#+BEGIN_SRC emacs-lisp
  (setq use-package-check-before-init t)
#+END_SRC

Finally we're going to always defer loading packages, just to save
some time to load Emacs. If we require a package before it's loaded we
can demand it by using ~:demand t~ while configuring it.
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t)
#+END_SRC
* Org-mode
As this whole configuration is built on ~org-mode~ we're going to
install the latest and greatest version of it as well to get even more
goodies.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib)
#+END_SRC
